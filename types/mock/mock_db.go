// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	xorm "github.com/go-xorm/xorm"
	gomock "github.com/golang/mock/gomock"
	types "github.com/starslabhq/hermes-rebalance/types"
	reflect "reflect"
)

// MockIReader is a mock of IReader interface
type MockIReader struct {
	ctrl     *gomock.Controller
	recorder *MockIReaderMockRecorder
}

// MockIReaderMockRecorder is the mock recorder for MockIReader
type MockIReaderMockRecorder struct {
	mock *MockIReader
}

// NewMockIReader creates a new mock instance
func NewMockIReader(ctrl *gomock.Controller) *MockIReader {
	mock := &MockIReader{ctrl: ctrl}
	mock.recorder = &MockIReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIReader) EXPECT() *MockIReaderMockRecorder {
	return m.recorder
}

// GetOpenedPartReBalanceTasks mocks base method
func (m *MockIReader) GetOpenedPartReBalanceTasks() ([]*types.PartReBalanceTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenedPartReBalanceTasks")
	ret0, _ := ret[0].([]*types.PartReBalanceTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenedPartReBalanceTasks indicates an expected call of GetOpenedPartReBalanceTasks
func (mr *MockIReaderMockRecorder) GetOpenedPartReBalanceTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenedPartReBalanceTasks", reflect.TypeOf((*MockIReader)(nil).GetOpenedPartReBalanceTasks))
}

// GetTransactionTasksWithReBalanceId mocks base method
func (m *MockIReader) GetTransactionTasksWithReBalanceId(reBalanceId uint64, transactionType types.TransactionType) ([]*types.TransactionTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionTasksWithReBalanceId", reBalanceId, transactionType)
	ret0, _ := ret[0].([]*types.TransactionTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionTasksWithReBalanceId indicates an expected call of GetTransactionTasksWithReBalanceId
func (mr *MockIReaderMockRecorder) GetTransactionTasksWithReBalanceId(reBalanceId, transactionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionTasksWithReBalanceId", reflect.TypeOf((*MockIReader)(nil).GetTransactionTasksWithReBalanceId), reBalanceId, transactionType)
}

// GetOpenedTransactionTask mocks base method
func (m *MockIReader) GetOpenedTransactionTask() ([]*types.TransactionTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenedTransactionTask")
	ret0, _ := ret[0].([]*types.TransactionTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenedTransactionTask indicates an expected call of GetOpenedTransactionTask
func (mr *MockIReaderMockRecorder) GetOpenedTransactionTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenedTransactionTask", reflect.TypeOf((*MockIReader)(nil).GetOpenedTransactionTask))
}

// GetOrderID mocks base method
func (m *MockIReader) GetOrderID() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderID")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderID indicates an expected call of GetOrderID
func (mr *MockIReaderMockRecorder) GetOrderID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderID", reflect.TypeOf((*MockIReader)(nil).GetOrderID))
}

// GetOpenedCrossTasks mocks base method
func (m *MockIReader) GetOpenedCrossTasks() ([]*types.CrossTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenedCrossTasks")
	ret0, _ := ret[0].([]*types.CrossTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenedCrossTasks indicates an expected call of GetOpenedCrossTasks
func (mr *MockIReaderMockRecorder) GetOpenedCrossTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenedCrossTasks", reflect.TypeOf((*MockIReader)(nil).GetOpenedCrossTasks))
}

// GetCrossTasksByReBalanceId mocks base method
func (m *MockIReader) GetCrossTasksByReBalanceId(reBalanceId uint64) ([]*types.CrossTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrossTasksByReBalanceId", reBalanceId)
	ret0, _ := ret[0].([]*types.CrossTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrossTasksByReBalanceId indicates an expected call of GetCrossTasksByReBalanceId
func (mr *MockIReaderMockRecorder) GetCrossTasksByReBalanceId(reBalanceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrossTasksByReBalanceId", reflect.TypeOf((*MockIReader)(nil).GetCrossTasksByReBalanceId), reBalanceId)
}

// GetCrossSubTasks mocks base method
func (m *MockIReader) GetCrossSubTasks(crossTaskId uint64) ([]*types.CrossSubTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrossSubTasks", crossTaskId)
	ret0, _ := ret[0].([]*types.CrossSubTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrossSubTasks indicates an expected call of GetCrossSubTasks
func (mr *MockIReaderMockRecorder) GetCrossSubTasks(crossTaskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrossSubTasks", reflect.TypeOf((*MockIReader)(nil).GetCrossSubTasks), crossTaskId)
}

// GetOpenedCrossSubTasks mocks base method
func (m *MockIReader) GetOpenedCrossSubTasks(parentTaskId uint64) ([]*types.CrossSubTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenedCrossSubTasks", parentTaskId)
	ret0, _ := ret[0].([]*types.CrossSubTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenedCrossSubTasks indicates an expected call of GetOpenedCrossSubTasks
func (mr *MockIReaderMockRecorder) GetOpenedCrossSubTasks(parentTaskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenedCrossSubTasks", reflect.TypeOf((*MockIReader)(nil).GetOpenedCrossSubTasks), parentTaskId)
}

// MockIWriter is a mock of IWriter interface
type MockIWriter struct {
	ctrl     *gomock.Controller
	recorder *MockIWriterMockRecorder
}

// MockIWriterMockRecorder is the mock recorder for MockIWriter
type MockIWriterMockRecorder struct {
	mock *MockIWriter
}

// NewMockIWriter creates a new mock instance
func NewMockIWriter(ctrl *gomock.Controller) *MockIWriter {
	mock := &MockIWriter{ctrl: ctrl}
	mock.recorder = &MockIWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIWriter) EXPECT() *MockIWriterMockRecorder {
	return m.recorder
}

// GetSession mocks base method
func (m *MockIWriter) GetSession() *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession")
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// GetSession indicates an expected call of GetSession
func (mr *MockIWriterMockRecorder) GetSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockIWriter)(nil).GetSession))
}

// GetEngine mocks base method
func (m *MockIWriter) GetEngine() *xorm.Engine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEngine")
	ret0, _ := ret[0].(*xorm.Engine)
	return ret0
}

// GetEngine indicates an expected call of GetEngine
func (mr *MockIWriterMockRecorder) GetEngine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEngine", reflect.TypeOf((*MockIWriter)(nil).GetEngine))
}

// UpdatePartReBalanceTask mocks base method
func (m *MockIWriter) UpdatePartReBalanceTask(itf xorm.Interface, t *types.PartReBalanceTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartReBalanceTask", itf, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePartReBalanceTask indicates an expected call of UpdatePartReBalanceTask
func (mr *MockIWriterMockRecorder) UpdatePartReBalanceTask(itf, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartReBalanceTask", reflect.TypeOf((*MockIWriter)(nil).UpdatePartReBalanceTask), itf, t)
}

// SaveTxTasks mocks base method
func (m *MockIWriter) SaveTxTasks(arg0 xorm.Interface, arg1 []*types.TransactionTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTxTasks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTxTasks indicates an expected call of SaveTxTasks
func (mr *MockIWriterMockRecorder) SaveTxTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTxTasks", reflect.TypeOf((*MockIWriter)(nil).SaveTxTasks), arg0, arg1)
}

// UpdateTransactionTask mocks base method
func (m *MockIWriter) UpdateTransactionTask(itf xorm.Interface, task *types.TransactionTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionTask", itf, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransactionTask indicates an expected call of UpdateTransactionTask
func (mr *MockIWriterMockRecorder) UpdateTransactionTask(itf, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionTask", reflect.TypeOf((*MockIWriter)(nil).UpdateTransactionTask), itf, task)
}

// SaveCrossTasks mocks base method
func (m *MockIWriter) SaveCrossTasks(itf xorm.Interface, tasks []*types.CrossTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCrossTasks", itf, tasks)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCrossTasks indicates an expected call of SaveCrossTasks
func (mr *MockIWriterMockRecorder) SaveCrossTasks(itf, tasks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCrossTasks", reflect.TypeOf((*MockIWriter)(nil).SaveCrossTasks), itf, tasks)
}

// UpdateCrossTaskState mocks base method
func (m *MockIWriter) UpdateCrossTaskState(id uint64, state int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCrossTaskState", id, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCrossTaskState indicates an expected call of UpdateCrossTaskState
func (mr *MockIWriterMockRecorder) UpdateCrossTaskState(id, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCrossTaskState", reflect.TypeOf((*MockIWriter)(nil).UpdateCrossTaskState), id, state)
}

// UpdateCrossSubTaskBridgeIDAndState mocks base method
func (m *MockIWriter) UpdateCrossSubTaskBridgeIDAndState(id, bridgeTaskId uint64, state int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCrossSubTaskBridgeIDAndState", id, bridgeTaskId, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCrossSubTaskBridgeIDAndState indicates an expected call of UpdateCrossSubTaskBridgeIDAndState
func (mr *MockIWriterMockRecorder) UpdateCrossSubTaskBridgeIDAndState(id, bridgeTaskId, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCrossSubTaskBridgeIDAndState", reflect.TypeOf((*MockIWriter)(nil).UpdateCrossSubTaskBridgeIDAndState), id, bridgeTaskId, state)
}

// SaveCrossSubTask mocks base method
func (m *MockIWriter) SaveCrossSubTask(subTask *types.CrossSubTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCrossSubTask", subTask)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCrossSubTask indicates an expected call of SaveCrossSubTask
func (mr *MockIWriterMockRecorder) SaveCrossSubTask(subTask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCrossSubTask", reflect.TypeOf((*MockIWriter)(nil).SaveCrossSubTask), subTask)
}

// UpdateCrossSubTaskState mocks base method
func (m *MockIWriter) UpdateCrossSubTaskState(id uint64, state int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCrossSubTaskState", id, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCrossSubTaskState indicates an expected call of UpdateCrossSubTaskState
func (mr *MockIWriterMockRecorder) UpdateCrossSubTaskState(id, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCrossSubTaskState", reflect.TypeOf((*MockIWriter)(nil).UpdateCrossSubTaskState), id, state)
}

// MockIDB is a mock of IDB interface
type MockIDB struct {
	ctrl     *gomock.Controller
	recorder *MockIDBMockRecorder
}

// MockIDBMockRecorder is the mock recorder for MockIDB
type MockIDBMockRecorder struct {
	mock *MockIDB
}

// NewMockIDB creates a new mock instance
func NewMockIDB(ctrl *gomock.Controller) *MockIDB {
	mock := &MockIDB{ctrl: ctrl}
	mock.recorder = &MockIDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDB) EXPECT() *MockIDBMockRecorder {
	return m.recorder
}

// GetOpenedPartReBalanceTasks mocks base method
func (m *MockIDB) GetOpenedPartReBalanceTasks() ([]*types.PartReBalanceTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenedPartReBalanceTasks")
	ret0, _ := ret[0].([]*types.PartReBalanceTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenedPartReBalanceTasks indicates an expected call of GetOpenedPartReBalanceTasks
func (mr *MockIDBMockRecorder) GetOpenedPartReBalanceTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenedPartReBalanceTasks", reflect.TypeOf((*MockIDB)(nil).GetOpenedPartReBalanceTasks))
}

// GetTransactionTasksWithReBalanceId mocks base method
func (m *MockIDB) GetTransactionTasksWithReBalanceId(reBalanceId uint64, transactionType types.TransactionType) ([]*types.TransactionTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionTasksWithReBalanceId", reBalanceId, transactionType)
	ret0, _ := ret[0].([]*types.TransactionTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionTasksWithReBalanceId indicates an expected call of GetTransactionTasksWithReBalanceId
func (mr *MockIDBMockRecorder) GetTransactionTasksWithReBalanceId(reBalanceId, transactionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionTasksWithReBalanceId", reflect.TypeOf((*MockIDB)(nil).GetTransactionTasksWithReBalanceId), reBalanceId, transactionType)
}

// GetOpenedTransactionTask mocks base method
func (m *MockIDB) GetOpenedTransactionTask() ([]*types.TransactionTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenedTransactionTask")
	ret0, _ := ret[0].([]*types.TransactionTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenedTransactionTask indicates an expected call of GetOpenedTransactionTask
func (mr *MockIDBMockRecorder) GetOpenedTransactionTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenedTransactionTask", reflect.TypeOf((*MockIDB)(nil).GetOpenedTransactionTask))
}

// GetOrderID mocks base method
func (m *MockIDB) GetOrderID() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderID")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderID indicates an expected call of GetOrderID
func (mr *MockIDBMockRecorder) GetOrderID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderID", reflect.TypeOf((*MockIDB)(nil).GetOrderID))
}

// GetOpenedCrossTasks mocks base method
func (m *MockIDB) GetOpenedCrossTasks() ([]*types.CrossTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenedCrossTasks")
	ret0, _ := ret[0].([]*types.CrossTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenedCrossTasks indicates an expected call of GetOpenedCrossTasks
func (mr *MockIDBMockRecorder) GetOpenedCrossTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenedCrossTasks", reflect.TypeOf((*MockIDB)(nil).GetOpenedCrossTasks))
}

// GetCrossTasksByReBalanceId mocks base method
func (m *MockIDB) GetCrossTasksByReBalanceId(reBalanceId uint64) ([]*types.CrossTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrossTasksByReBalanceId", reBalanceId)
	ret0, _ := ret[0].([]*types.CrossTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrossTasksByReBalanceId indicates an expected call of GetCrossTasksByReBalanceId
func (mr *MockIDBMockRecorder) GetCrossTasksByReBalanceId(reBalanceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrossTasksByReBalanceId", reflect.TypeOf((*MockIDB)(nil).GetCrossTasksByReBalanceId), reBalanceId)
}

// GetCrossSubTasks mocks base method
func (m *MockIDB) GetCrossSubTasks(crossTaskId uint64) ([]*types.CrossSubTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrossSubTasks", crossTaskId)
	ret0, _ := ret[0].([]*types.CrossSubTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrossSubTasks indicates an expected call of GetCrossSubTasks
func (mr *MockIDBMockRecorder) GetCrossSubTasks(crossTaskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrossSubTasks", reflect.TypeOf((*MockIDB)(nil).GetCrossSubTasks), crossTaskId)
}

// GetOpenedCrossSubTasks mocks base method
func (m *MockIDB) GetOpenedCrossSubTasks(parentTaskId uint64) ([]*types.CrossSubTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenedCrossSubTasks", parentTaskId)
	ret0, _ := ret[0].([]*types.CrossSubTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenedCrossSubTasks indicates an expected call of GetOpenedCrossSubTasks
func (mr *MockIDBMockRecorder) GetOpenedCrossSubTasks(parentTaskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenedCrossSubTasks", reflect.TypeOf((*MockIDB)(nil).GetOpenedCrossSubTasks), parentTaskId)
}

// GetSession mocks base method
func (m *MockIDB) GetSession() *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession")
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// GetSession indicates an expected call of GetSession
func (mr *MockIDBMockRecorder) GetSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockIDB)(nil).GetSession))
}

// GetEngine mocks base method
func (m *MockIDB) GetEngine() *xorm.Engine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEngine")
	ret0, _ := ret[0].(*xorm.Engine)
	return ret0
}

// GetEngine indicates an expected call of GetEngine
func (mr *MockIDBMockRecorder) GetEngine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEngine", reflect.TypeOf((*MockIDB)(nil).GetEngine))
}

// UpdatePartReBalanceTask mocks base method
func (m *MockIDB) UpdatePartReBalanceTask(itf xorm.Interface, t *types.PartReBalanceTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartReBalanceTask", itf, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePartReBalanceTask indicates an expected call of UpdatePartReBalanceTask
func (mr *MockIDBMockRecorder) UpdatePartReBalanceTask(itf, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartReBalanceTask", reflect.TypeOf((*MockIDB)(nil).UpdatePartReBalanceTask), itf, t)
}

// SaveTxTasks mocks base method
func (m *MockIDB) SaveTxTasks(arg0 xorm.Interface, arg1 []*types.TransactionTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTxTasks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTxTasks indicates an expected call of SaveTxTasks
func (mr *MockIDBMockRecorder) SaveTxTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTxTasks", reflect.TypeOf((*MockIDB)(nil).SaveTxTasks), arg0, arg1)
}

// UpdateTransactionTask mocks base method
func (m *MockIDB) UpdateTransactionTask(itf xorm.Interface, task *types.TransactionTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionTask", itf, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransactionTask indicates an expected call of UpdateTransactionTask
func (mr *MockIDBMockRecorder) UpdateTransactionTask(itf, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionTask", reflect.TypeOf((*MockIDB)(nil).UpdateTransactionTask), itf, task)
}

// SaveCrossTasks mocks base method
func (m *MockIDB) SaveCrossTasks(itf xorm.Interface, tasks []*types.CrossTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCrossTasks", itf, tasks)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCrossTasks indicates an expected call of SaveCrossTasks
func (mr *MockIDBMockRecorder) SaveCrossTasks(itf, tasks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCrossTasks", reflect.TypeOf((*MockIDB)(nil).SaveCrossTasks), itf, tasks)
}

// UpdateCrossTaskState mocks base method
func (m *MockIDB) UpdateCrossTaskState(id uint64, state int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCrossTaskState", id, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCrossTaskState indicates an expected call of UpdateCrossTaskState
func (mr *MockIDBMockRecorder) UpdateCrossTaskState(id, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCrossTaskState", reflect.TypeOf((*MockIDB)(nil).UpdateCrossTaskState), id, state)
}

// UpdateCrossSubTaskBridgeIDAndState mocks base method
func (m *MockIDB) UpdateCrossSubTaskBridgeIDAndState(id, bridgeTaskId uint64, state int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCrossSubTaskBridgeIDAndState", id, bridgeTaskId, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCrossSubTaskBridgeIDAndState indicates an expected call of UpdateCrossSubTaskBridgeIDAndState
func (mr *MockIDBMockRecorder) UpdateCrossSubTaskBridgeIDAndState(id, bridgeTaskId, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCrossSubTaskBridgeIDAndState", reflect.TypeOf((*MockIDB)(nil).UpdateCrossSubTaskBridgeIDAndState), id, bridgeTaskId, state)
}

// SaveCrossSubTask mocks base method
func (m *MockIDB) SaveCrossSubTask(subTask *types.CrossSubTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCrossSubTask", subTask)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCrossSubTask indicates an expected call of SaveCrossSubTask
func (mr *MockIDBMockRecorder) SaveCrossSubTask(subTask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCrossSubTask", reflect.TypeOf((*MockIDB)(nil).SaveCrossSubTask), subTask)
}

// UpdateCrossSubTaskState mocks base method
func (m *MockIDB) UpdateCrossSubTaskState(id uint64, state int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCrossSubTaskState", id, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCrossSubTaskState indicates an expected call of UpdateCrossSubTaskState
func (mr *MockIDBMockRecorder) UpdateCrossSubTaskState(id, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCrossSubTaskState", reflect.TypeOf((*MockIDB)(nil).UpdateCrossSubTaskState), id, state)
}

// MockIAsyncService is a mock of IAsyncService interface
type MockIAsyncService struct {
	ctrl     *gomock.Controller
	recorder *MockIAsyncServiceMockRecorder
}

// MockIAsyncServiceMockRecorder is the mock recorder for MockIAsyncService
type MockIAsyncServiceMockRecorder struct {
	mock *MockIAsyncService
}

// NewMockIAsyncService creates a new mock instance
func NewMockIAsyncService(ctrl *gomock.Controller) *MockIAsyncService {
	mock := &MockIAsyncService{ctrl: ctrl}
	mock.recorder = &MockIAsyncServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAsyncService) EXPECT() *MockIAsyncServiceMockRecorder {
	return m.recorder
}

// Name mocks base method
func (m *MockIAsyncService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockIAsyncServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIAsyncService)(nil).Name))
}

// Run mocks base method
func (m *MockIAsyncService) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockIAsyncServiceMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIAsyncService)(nil).Run))
}
