// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	bridge "github.com/starslabhq/hermes-rebalance/bridge"
	reflect "reflect"
)

// MockIBridge is a mock of IBridge interface
type MockIBridge struct {
	ctrl     *gomock.Controller
	recorder *MockIBridgeMockRecorder
}

// MockIBridgeMockRecorder is the mock recorder for MockIBridge
type MockIBridgeMockRecorder struct {
	mock *MockIBridge
}

// NewMockIBridge creates a new mock instance
func NewMockIBridge(ctrl *gomock.Controller) *MockIBridge {
	mock := &MockIBridge{ctrl: ctrl}
	mock.recorder = &MockIBridgeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIBridge) EXPECT() *MockIBridgeMockRecorder {
	return m.recorder
}

// GetCurrencyID mocks base method
func (m *MockIBridge) GetCurrencyID(currency string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyID", currency)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCurrencyID indicates an expected call of GetCurrencyID
func (mr *MockIBridgeMockRecorder) GetCurrencyID(currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyID", reflect.TypeOf((*MockIBridge)(nil).GetCurrencyID), currency)
}

// GetAccountId mocks base method
func (m *MockIBridge) GetAccountId(addr string, chainId int) (uint64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountId", addr, chainId)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetAccountId indicates an expected call of GetAccountId
func (mr *MockIBridgeMockRecorder) GetAccountId(addr, chainId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountId", reflect.TypeOf((*MockIBridge)(nil).GetAccountId), addr, chainId)
}

// GetChainId mocks base method
func (m *MockIBridge) GetChainId(chain string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainId", chain)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetChainId indicates an expected call of GetChainId
func (mr *MockIBridgeMockRecorder) GetChainId(chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainId", reflect.TypeOf((*MockIBridge)(nil).GetChainId), chain)
}

// GetTaskDetail mocks base method
func (m *MockIBridge) GetTaskDetail(taskID uint64) (*bridge.TaskDetailResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskDetail", taskID)
	ret0, _ := ret[0].(*bridge.TaskDetailResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskDetail indicates an expected call of GetTaskDetail
func (mr *MockIBridgeMockRecorder) GetTaskDetail(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskDetail", reflect.TypeOf((*MockIBridge)(nil).GetTaskDetail), taskID)
}

// EstimateTask mocks base method
func (m *MockIBridge) EstimateTask(t *bridge.Task) (*bridge.EstimateTaskResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateTask", t)
	ret0, _ := ret[0].(*bridge.EstimateTaskResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateTask indicates an expected call of EstimateTask
func (mr *MockIBridgeMockRecorder) EstimateTask(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateTask", reflect.TypeOf((*MockIBridge)(nil).EstimateTask), t)
}

// AddTask mocks base method
func (m *MockIBridge) AddTask(t *bridge.Task) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", t)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTask indicates an expected call of AddTask
func (mr *MockIBridgeMockRecorder) AddTask(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockIBridge)(nil).AddTask), t)
}
