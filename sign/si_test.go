package sign

import (
	"fmt"
	"testing"
)

var EncryptData string
var CipherKey string

func TestSignGatewayEvmChain(t *testing.T) {
	siReq := SigReqData{
		To:    "a929022c9107643515f5c777ce9a910f0d1e490c",
		ToTag: "dd9b86c1000000000000000000000000a71edc38d189767582c38a3145b5873052c3e47a0000000000000000000000000000000000000000000422ca8b0a00a425000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000286139633032303462313062626131306666636534383864636536666666663163616364626262313000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036574680000000000000000000000000000000000000000000000000000000000",
		Nonce: 13,
		Decimal: 18,
		From:     "606288c605942f3c84a7794c0b3257b56487263c",
		//GasLimit 2000000
		FeeStep: "2000000",
		//GasPrice 1.2*suggestGasprice, or 150Gwei by default
		FeePrice: "15000000000",
		Amount:   "0",
		TaskType: "withdraw",
	}
	auReq := BusData{
		Chain: "heco",
		Quantity: "101000000000000000000",
		ToAddress: "a9c0204b10bba10ffce488dce6ffff1cacdbbb10",
		ToTag: "dd9b86c1000000000000000000000000a71edc38d189767582c38a3145b5873052c3e47a0000000000000000000000000000000000000000000422ca8b0a00a425000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000286139633032303462313062626131306666636534383864636536666666663163616364626262313000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036574680000000000000000000000000000000000000000000000000000000000",
	}

	appId := "rebal-si-gateway"

	signReq := SignReq{
		SiReq: siReq,
		AuReq: auReq,
	}

	resp, err := SignGatewayEvmChain(signReq, appId)
	if err != nil{
		t.Error(err)
	}

	t.Log(resp.Data.EncryptData)
	t.Log(resp.Data.Extra.Cipher)

	EncryptData  = resp.Data.EncryptData
	CipherKey = resp.Data.Extra.Cipher

	fmt.Println(resp)

	fmt.Println("EncryptData")
	fmt.Println(EncryptData)

	fmt.Println("CipherKey")
	fmt.Println(CipherKey)
}


func TestPostAuditInfo(t *testing.T) {
	req := AuditRequest{
		BusType:"starsHecoBridgeWithdraw",
		BusStep: 1,
		BusId: "15",
		BusData: BusData{
			Chain: "heco",
			Quantity: "101000000000000000000",
			ToAddress: "a9c0204b10bba10ffce488dce6ffff1cacdbbb10",
			ToTag: "dd9b86c1000000000000000000000000a71edc38d189767582c38a3145b5873052c3e47a0000000000000000000000000000000000000000000422ca8b0a00a425000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000286139633032303462313062626131306666636534383864636536666666663163616364626262313000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036574680000000000000000000000000000000000000000000000000000000000",
		},
		Result: 1,
	}

	appId := "rebal-si-gateway"

	resp, err := PostAuditInfo(req, appId)
	if err != nil {
		t.Error(err)
	}
	t.Log(resp.Code)
	fmt.Println(resp)
}


func TestValidator(t *testing.T) {
	appId := "rebal-si-gateway"
	req := ValidReq{
		Id: 15,    //取远程配置出错
		Platform: "starshecobridge",
		Chain: "ht2",
		EncryptData: EncryptData,
		CipherKey: CipherKey,
	}

	fmt.Println(req)
	fmt.Println(appId)

	resp, err := Validator(req, appId)
	if err != nil{
		t.Error(err)
	}
	t.Log(resp.OK)
	fmt.Println(resp)
}

